[
    { "id": "experiments", "parent": "#", "text": "Experiments" },

    { "id": "import_export", "parent": "#", "text": "Import/Export" },
    { "id": "reset", "parent": "import_export", "text": "reset" },
    { "id": "import_required_libs", "parent": "import_export", "text": "import required libraries" },
    { "id": "export_data_tocsv", "parent": "import_export", "text": "export data to csv" },

    { "id": "data_cleaning", "parent": "#", "text": "Data Cleaning" },
    { "id": "lower_cols", "parent": "data_cleaning", "text": "lower columns" },
    { "id": "rename_cols", "parent": "data_cleaning", "text": "rename columns" },
    { "id": "drop_duplicates", "parent": "data_cleaning", "text": "drop duplicates" },
    { "id": "drop_cols_high_perc_missing", "parent": "data_cleaning", "text": "drop high % of missing values" },
    { "id": "convert_cols_type", "parent": "data_cleaning", "text": "convert data type" },
    { "id": "filter_rows_by_cond", "parent": "data_cleaning", "text": "filter pandas rows by condition" },
    { "id": "filter_rows_by_index", "parent": "data_cleaning", "text": "filter pandas rows by index" },
    { "id": "set_cols_values_by_cond", "parent": "data_cleaning", "text": "update pandas values" },
    { "id": "fill_missing_vals", "parent": "data_cleaning", "text": "filling missing values" },
    { "id": "remove_outliers", "parent": "data_cleaning", "text": "remove outliers" },

    { "id": "feature_selection", "parent": "#", "text": "Feature Selection" },
    { "id": "drop_cols", "parent": "feature_selection", "text": "drop columns" },
    { "id": "drop_high_corr_cols", "parent": "feature_selection", "text": "drop highly corr cols" },
    { "id": "filter_by_P-value", "parent": "feature_selection", "text": "filter by P-value" },
    { "id": "RFE", "parent": "feature_selection", "text": "recursive feature elemination" },


    { "id": "feature_engineering", "parent": "#", "text": "Feature Engineering" },
    { "id": "add_computed_cols", "parent": "feature_engineering", "text": "add computed features" },
    { "id": "bucket_cols", "parent": "feature_engineering", "text": "bucket/bin features" },

    { "id": "feature_transformation", "parent": "#", "text": "Feature Transformation" }, 
    { "id": "dummy_variables", "parent": "feature_transformation", "text": "create dummy variables" }, 
    { "id": "standard_scaler", "parent": "feature_transformation", "text": "Standard Scaler" }, 
    { "id": "minmax_scaler", "parent": "feature_transformation", "text": "MinMax Scaler" }, 
    { "id": "power_transformer", "parent": "feature_transformation", "text": "Power Transformer" }, 
    { "id": "quantile_transformer", "parent": "feature_transformation", "text": "Quantile Transformer" }, 

    { "id": "data_sampling", "parent": "#", "text": "Data Sampling" },
    { "id": "sample_data", "parent": "data_sampling", "text": "take random sample" },
    { "id": "undersampling_by_imbalanced_learn", "parent": "data_sampling", "text": "undersampling by ImbLearn" },
    { "id": "upsampling_by_smote", "parent": "data_sampling", "text": "upsampling using SMOTE" },


    { "id": "data_splitting", "parent": "#", "text": "Data Splitting" },
    { "id": "XY_split", "parent": "data_splitting", "text": "XY split" },
    { "id": "numercial_cateogrical_split", "parent": "data_splitting", "text": "numercial / Categorical split" },
    { "id": "train_test_split", "parent": "data_splitting", "text": "train test split" },

    { "id": "Regression", "parent": "#", "text": "Modeling - Regression" },
    { "id": "linear_regression", "parent": "Regression", "text": "Linear Regression" },
    { "id": "lasso_regression", "parent": "Regression", "text": "Lasso Regression" },
    { "id": "ridge_regression", "parent": "Regression", "text": "Ridge Regression" },
    { "id": "elastic_net_regression", "parent": "Regression", "text": "Elastic Net Regression" },
    { "id": "knn_regression", "parent": "Regression", "text": "KNN Regressor" },
    { "id": "decision_tree_regression", "parent": "Regression", "text": "Decision Tree Regressor" },
    { "id": "random_forest_regression", "parent": "Regression", "text": "Random Forest Regressor" },

    { "id": "Classification", "parent": "#", "text": "Modeling - Classification" },
    { "id": "logisitc_regression", "parent": "Classification", "text": "Logisitc Regression" },
    { "id": "knn_classification", "parent": "Classification", "text": "KNN Classifier" },
    { "id": "decision_tree_classification", "parent": "Classification", "text": "Decision Tree Classifier" },
    { "id": "random_forest_classification", "parent": "Classification", "text": "Random Forest Classifier" },


    { "id": "Clustering", "parent": "#", "text": "Modeling - Clustering" },
    { "id": "kmeans_clustering", "parent": "Clustering", "text": "K-means" },

    { "id": "model_validation", "parent": "#", "text": "Model Validation" },
    { "id": "regression_model_evaluating", "parent": "model_validation", "text": "Regression Model Metrics" },
    { "id": "classification_model_evaluating", "parent": "model_validation", "text": "Classification Model Metrics" },
    { "id": "cross_validation", "parent": "model_validation", "text": "Cross Validation" },

    { "id": "model_interpretation", "parent": "#", "text": "Model Interpretation" }

]